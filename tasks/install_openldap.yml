---
- name: OPENLDAP | Install | Ensure needed packages
  ansible.builtin.apt:
    name: "{{ ldap_server_packages }}"
    update_cache: yes

- name: OPENLDAP | Install | Ensure pip requirements
  ansible.builtin.pip:
    name: "{{ ldap_pip_requirements }}"

- name: OPENLDAP | Install | Ensure needed directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: 1001
  with_items:
    - "{{ ldap_data }}"
    - "{{ ldap_tls_cert_host_path }}"

- name: OPENLDAP | Install | Start openldap container
  community.docker.docker_compose:
    project_name: openldap
    definition:
      version: '3'
      services:
        openldap:
          image: "{{ ldap_image }}:{{ ldap_version }}"
          container_name: openldap
          hostname: "{{ ldap_hostname }}"
          restart: always
          ports:
            - '{{ ldap_interface }}:{{ ldap_port }}:1389'
            - '{{ ldap_interface }}:{{ ldaps_port }}:1636'
          environment:
            - LDAP_ROOT={{ ldap_root }}
            - LDAP_ADMIN_USERNAME={{ ldap_admin_username }}
            - LDAP_ADMIN_PASSWORD={{ ldap_admin_password }}
            - LDAP_CONFIG_ADMIN_ENABLED=yes
            - LDAP_CONFIG_ADMIN_USERNAME={{ ldap_admin_username }}
            - LDAP_CONFIG_ADMIN_PASSWORD={{ ldap_admin_password }}
            - LDAP_SKIP_DEFAULT_TREE=yes
            - LDAP_ALLOW_ANON_BINDING=no
            - LDAP_ENABLE_TLS={{ ldap_enable_tls }}
            - LDAP_TLS_CERT_FILE={{ ldap_tls_cert_path }}/{{ ldap_tls_cert_file_name }}
            - LDAP_TLS_KEY_FILE={{ ldap_tls_cert_path }}/{{ ldap_tls_key_file_name }}
            - LDAP_TLS_CA_FILE={{ ldap_tls_cert_path }}/{{ ldap_tls_ca_file_name }}
          volumes:
            - '{{ ldap_data }}:/bitnami/openldap'
            - '{{ ldap_tls_cert_host_path }}:{{ ldap_tls_cert_path }}:ro'

- name: OPENLDAP | Install | Create organisation {{ ldap_root }}
  community.general.ldap_entry:
    server_uri: "ldap://localhost:{{ ldap_port }}"
    bind_dn: "cn={{ ldap_admin_username }},{{ ldap_root }}"
    bind_pw: "{{ ldap_admin_password }}"
    dn: "{{ ldap_root }}"
    objectClass:
      - dcObject
      - organization
    attributes:
      dc: "{{ ldap_root_dc }}"
      o: "{{ ldap_organisation }}"
  register: connect_result
  retries: 5
  delay: 3
  until: connect_result is not failed

- name: OPENLDAP | Install | Create openssh-lpk in cn=config
  community.general.ldap_entry:
    server_uri: "ldap://localhost:{{ ldap_port }}"
    bind_dn: "cn={{ ldap_admin_username }},cn=config"
    bind_pw: "{{ ldap_admin_password }}"
    dn: cn=openssh-lpk,cn=schema,cn=config
    objectClass: olcSchemaConfig
    attributes:
      olcAttributeTypes: >-
        {0}( 1.3.6.1.4.1.24552.500.1.1.1.13 NAME 'sshPublicKey'
        DESC 'MANDATORY: OpenSSH Public key'
        EQUALITY octetStringMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.40 )
      olcObjectClasses: >-
        {0}( 1.3.6.1.4.1.24552.500.1.1.2.0 NAME 'ldapPublicKey'
        DESC 'MANDATORY: OpenSSH LPK objectclass'
        SUP top AUXILIARY MAY ( sshPublicKey $ uid ) )
  register: config_openssh_lpk
  failed_when:
    - config_openssh_lpk.details is defined
    - '{{ "Duplicate" not in config_openssh_lpk.details }}'
    - not config_openssh_lpk.changed

- name: OPENLDAP | Install | Create readonly user
  community.general.ldap_entry:
    server_uri: "ldap://localhost:{{ ldap_port }}"
    bind_dn: "cn={{ ldap_admin_username }},{{ ldap_root }}"
    bind_pw: "{{ ldap_admin_password }}"
    dn: "cn={{ ldap_readonly_username }},{{ ldap_root }}"
    objectClass:
      - simpleSecurityObject
      - organizationalRole
    attributes:
      userPassword: "{{ ldap_readonly_passwordHash }}"
      cn: "{{ ldap_readonly_username }}"

- name: OPENLDAP | Install | Change password for readonly user
  community.general.ldap_passwd:
    server_uri: "ldap://localhost:{{ ldap_port }}"
    bind_dn: "cn={{ ldap_admin_username }},{{ ldap_root }}"
    bind_pw: "{{ ldap_admin_password }}"
    dn: "cn={{ ldap_readonly_username }},{{ ldap_root }}"
    passwd: "{{ ldap_readonly_password }}"
  when: ldap_readonly_password is defined

- name: OPENLDAP | Install | Create olcAccess
  community.general.ldap_attrs:
    server_uri: "ldap://localhost:{{ ldap_port }}"
    bind_dn: "cn={{ ldap_admin_username }},cn=config"
    bind_pw: "{{ ldap_admin_password }}"
    dn: olcDatabase={2}mdb,cn=config
    attributes:
      olcAccess: "{{ ldap_mdb_olcAccess }}"
    state: "exact"

- name: OPENLDAP | Install | Add modules
  block:
    - name: OPENLDAP | Install | Search modules
      community.general.ldap_search:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},cn=config"
        bind_pw: "{{ ldap_admin_password }}"
        dn: "cn=config"
        scope: "children"
        attrs:
          - "dn"
        filter: "(&(objectClass=olcModuleList)(olcModulePath=/opt/bitnami/openldap/lib/openldap))"
        # filter: "(&(objectClass=olcModuleList)(|{%for attrs in ldap_olcmoduleload %}(olcModuleLoad={{attrs}}){%endfor%}))"
      register: modules_list

    - name: OPENLDAP | Install | Create cn=module,cn=config
      community.general.ldap_entry:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},cn=config"
        bind_pw: "{{ ldap_admin_password }}"
        dn: cn=module,cn=config
        objectClass:
          - olcModuleList
        attributes:
          olcModulePath: /opt/bitnami/openldap/lib/openldap
      when:
        - modules_list.results | length == 0

    - name: OPENLDAP | Install | Search modules
      community.general.ldap_search:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},cn=config"
        bind_pw: "{{ ldap_admin_password }}"
        dn: "cn=config"
        scope: "children"
        attrs:
          - "dn"
        filter: "(&(objectClass=olcModuleList)(olcModulePath=/opt/bitnami/openldap/lib/openldap))"
      register: modules_list

    - name: OPENLDAP | Install | Add olcModuleLoad to cn=module,cn=config
      community.general.ldap_attrs:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},cn=config"
        bind_pw: "{{ ldap_admin_password }}"
        dn: "{{ modules_list.results[-1].dn }}"
        attributes:
          olcModuleLoad: "{{ ldap_olcmoduleload }}"

    - name: OPENLDAP | Install | Create olcOverlay=memberof,olcDatabase={2}mdb,cn=config
      community.general.ldap_entry:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},cn=config"
        bind_pw: "{{ ldap_admin_password }}"
        dn: olcOverlay=memberof,olcDatabase={2}mdb,cn=config
        objectClass:
          - olcOverlayConfig
          - olcMemberOf
        attributes:
          olcOverlay: memberof
          olcMemberOfRefint: "TRUE"

    - name: OPENLDAP | Install | Ensure ou=pwPolicies
      community.general.ldap_entry:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},{{ ldap_root }}"
        bind_pw: "{{ ldap_admin_password }}"
        dn: "ou=pwPolicies,{{ ldap_root }}"
        objectClass:
          - organizationalUnit

    - name: OPENLDAP | Install | Create ppolices
      community.general.ldap_entry:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},{{ ldap_root }}"
        bind_pw: "{{ ldap_admin_password }}"
        dn: "cn={{ item.name }},ou=pwPolicies,{{ ldap_root }}"
        objectClass:
          - applicationProcess
          - pwdPolicy
        attributes:
          cn: "{{ item.name }}"
          pwdAttribute: 2.5.4.35
      with_items: "{{ ldap_ppolicies }}"

    - name: OPENLDAP | Install | Change ppolicies
      community.general.ldap_attrs:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},{{ ldap_root }}"
        bind_pw: "{{ ldap_admin_password }}"
        dn: "cn={{ item.name }},ou=pwPolicies,{{ ldap_root }}"
        attributes: "{{ item.policies }}"
        state: exact
      with_items: "{{ ldap_ppolicies }}"

    - name: OPENLDAP | Install | Create olcOverlay=ppolicy,olcDatabase={2}mdb,cn=config
      community.general.ldap_entry:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},cn=config"
        bind_pw: "{{ ldap_admin_password }}"
        dn: olcOverlay=ppolicy,olcDatabase={2}mdb,cn=config
        objectClass:
          - olcOverlayConfig
          - olcPPolicyConfig
        attributes:
          olcOverlay: ppolicy
          olcPPolicyDefault: "cn=default,ou=pwPolicies,{{ ldap_root }}"
          olcPPolicyHashCleartext: "FALSE"
          olcPPolicyUseLockout: "FALSE"
          olcPPolicyForwardUpdates: "FALSE"

    - name: OPENLDAP | Install | Add pwdPolicySubentry to readonly user
      community.general.ldap_attrs:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},{{ ldap_root }}"
        bind_pw: "{{ ldap_admin_password }}"
        dn: "cn={{ ldap_readonly_username }},{{ ldap_root }}"
        attributes:
          pwdPolicySubentry: "cn=reader,ou=pwPolicies,{{ ldap_root }}"

  when: ldap_add_modules

- name: OPENLDAP | Install | Configure replication
  block:
    - name: OPENLDAP | Install | Set ldap_olcserverids
      set_fact:
        ldap_olcserverids: "{{ ldap_olcserverids | default ([]) + [ (index + 1) | string + ' ldap://' + item + ':' + ldap_port ] }}"
      loop: "{{ ldap_server_list }}"
      loop_control:
        index_var: index

    - name: OPENLDAP | Install | Configure olcServerID
      community.general.ldap_attrs:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},cn=config"
        bind_pw: "{{ ldap_admin_password }}"
        dn: "cn=config"
        state: "exact"
        attributes:
          olcServerID: "{{ ldap_olcserverids }}"

    - name: OPENLDAP | Install | Create olcOverlay=syncprov,olcDatabase={0}config,cn=config
      community.general.ldap_entry:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},cn=config"
        bind_pw: "{{ ldap_admin_password }}"
        dn: olcOverlay=syncprov,olcDatabase={0}config,cn=config
        objectClass:
          -  olcOverlayConfig
          -  olcSyncProvConfig
        attributes:
          olcOverlay: syncprov

    - name: OPENLDAP | Install | Set config_olcSyncRepls
      set_fact:
        config_olcSyncRepls: >-
          {{ config_olcSyncRepls | default ([]) + [
          'rid=00' + (index + 1) | string + ' provider=ldap://' + item + ':' + ldap_port + ' binddn="cn=' + ldap_admin_username + ',cn=config" bindmethod=simple
          credentials=' + ldap_admin_password + ' searchbase="cn=config" type=refreshAndPersist
          retry="5 5 300 5" timeout=1'
           ] }}
      loop: "{{ ldap_server_list }}"
      loop_control:
        index_var: index

    - name: OPENLDAP | Install | Configure sync olcDatabase={0}config,cn=config
      community.general.ldap_attrs:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},cn=config"
        bind_pw: "{{ ldap_admin_password }}"
        dn: "olcDatabase={0}config,cn=config"
        attributes:
          olcSyncRepl: "{{ config_olcSyncRepls }}"
          olcMirrorMode: "TRUE"

    - name: OPENLDAP | Install | Set mdb_olcSyncRepls
      set_fact:
        mdb_olcSyncRepls: >-
          {{ mdb_olcSyncRepls | default ([]) + [
          'rid=10' + (index + 1) | string + ' provider=ldap://' + item + ':' + ldap_port + ' binddn="cn=' + ldap_admin_username + "," + ldap_root + '" bindmethod=simple
          credentials=' + ldap_admin_password + ' searchbase="' + ldap_root + '" type=refreshOnly
          interval=00:00:00:10 retry="5 5 300 5" timeout=1'
           ] }}
      loop: "{{ ldap_server_list }}"
      loop_control:
        index_var: index

    - name: OPENLDAP | Install | Configure sync olcDatabase={2}mdb,cn=config
      community.general.ldap_attrs:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},cn=config"
        bind_pw: "{{ ldap_admin_password }}"
        dn: olcDatabase={2}mdb,cn=config
        attributes:
          olcLimits: dn.exact="cn={{ ldap_admin_username }},{{ ldap_root }}" time.soft=unlimited time.hard=unlimited size.soft=unlimited size.hard=unlimited
          olcSyncRepl: "{{ mdb_olcSyncRepls }}"
          olcMirrorMode: "TRUE"

    - name: OPENLDAP | Install | Create olcOverlay=syncprov,olcDatabase={2}mdb,cn=config
      community.general.ldap_entry:
        server_uri: "ldap://localhost:{{ ldap_port }}"
        bind_dn: "cn={{ ldap_admin_username }},cn=config"
        bind_pw: "{{ ldap_admin_password }}"
        dn: olcOverlay=syncprov,olcDatabase={2}mdb,cn=config
        objectClass:
          -  olcOverlayConfig
          -  olcSyncProvConfig
        attributes:
          olcOverlay: syncprov

  when: ldap_server_list | length > 1
